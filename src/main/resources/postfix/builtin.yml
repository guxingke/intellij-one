namespace: builtin
definitions:
  - name: toIdMap  # 补全触发的关键字
    description: convert to id map  # 补全时的描述
    templates: # 可能有多个子模板，命中顺序即配置顺序
        - type: generic # 泛型
          clazz: java.util.Collection # 容器类名, 此类名可配置为目标类型的父类。
          requires: # 当前子模板的生效条件, 多个条件的情况下，需要全部满足
              - type: class # 类, 类存在
                name: java.util.stream.Stream # 类名
              - type: method # 方法, 方法存在, 暂只匹配方法名
                clazz: $componentClass$ # 类名，$xxx$ 为变量，可指定为具体类名
                name: getId  # 方法名
          template: $expr$.stream().collect(java.util.stream.Collectors.toMap($componentClass$::getId, it -> it, (l, r) -> l))$END$ # 模板, 部分变量是内置的
        - type: generic # 泛型
          clazz: java.util.Stream
          requires:
              - type: method
                clazz: $componentClass$
                name: getId
          template: $expr$.collect(java.util.stream.Collectors.toMap($componentClass$::getId, it -> it, (l, r) -> l))$END$
        - type: array # 数组
          clazz: ARRAY
          requires:
              - type: class
                name: java.util.stream.Stream
              - type: method # 方法, 方法存在, 暂只匹配方法名
                clazz: $componentClass$ # 类名，$xxx$ 为变量，可指定为具体类名
                name: getId  # 方法名
          template: java.util.Arrays.stream($expr$).collect(java.util.stream.Collectors.toMap($componentClass$::getId, it -> it, (l, r) -> l))$END$ # 模板, 部分变量是内置的

  - name: toMap
    description: convert to map
    templates:
        - type: generic
          clazz: java.util.Collection
          requires:
              - type: class
                name: java.util.stream.Stream
              - type: method
                clazz: $componentClass$
                name: getId
          template: $expr$.stream().collect(java.util.stream.Collectors.toMap(it -> $key$, it -> $value$))$END$
        - type: generic
          clazz: java.util.Stream
          requires:
              - type: method
                clazz: $componentClass$
                name: getId
          template: $expr$.collect(java.util.stream.Collectors.toMap(it -> $key$, it -> $value$))$END$
        - type: array # 数组
          clazz: ARRAY
          requires:
              - type: class
                name: java.util.stream.Stream
          template: $expr$.stream().collect(java.util.stream.Collectors.toMap($keyFun$, $valueFun$)$END$

  - name: toSet
    description: convert to set
    templates:
        - type: generic
          clazz: java.util.Collection
          requires:
              - type: class
                name: java.util.stream.Stream
          template: $expr$.stream().collect(java.util.stream.Collectors.toSet())$END$
        - type: generic
          clazz: java.util.stream.Stream
          template: $expr$.stream().collect(java.util.stream.Collectors.toSet())$END$
        - type: array # 数组
          clazz: ARRAY
          requires:
              - type: class
                name: java.util.stream.Stream
          template: $expr$.stream().collect(java.util.stream.Collectors.toSet())$END$

  - name: toList
    description: convert to list
    templates:
        - type: generic
          clazz: java.util.Collection
          requires:
              - type: class
                name: java.util.stream.Stream
          template: $expr$.stream().collect(java.util.stream.Collectors.toList())$END$
        - type: generic
          clazz: java.util.Stream
          template: $expr$.stream().collect(java.util.stream.Collectors.toList())$END$
        - type: array # 数组
          clazz: ARRAY
          requires:
              - type: class
                name: java.util.stream.Stream
          template: Arrays.stream($expr$).collect(java.util.stream.Collectors.toList())$END$

  - name: toArray
    description: convert to array
    templates:
        - type: generic
          clazz: java.util.Collection
          template: $expr$.toArray($componentClass$[]::new)$END$
        - type: generic
          clazz: java.util.stream.Stream
          template: $expr$.toArray($componentClass$[]::new)$END$

  - name: joining
    description: join string
    templates:
        - type: generic
          clazz: java.util.Collection
          requires:
              - type: componentClass
                name: java.lang.String
          template: java.lang.String.join("$delimiter$", $expr$)$END$
        - type: array
          clazz: ARRAY
          requires:
              - type: componentClass
                name: java.lang.String
          template: java.lang.String.join("$delimiter$", $expr$)$END$
        - type: generic
          clazz: java.util.stream.Stream
          requires:
              - type: componentClass
                name: java.lang.String
          template: $expr$.collect(java.util.stream.Collectors.joining("$delimiter$"))$END$

  - name: groupingBy
    description: grouping by function
    templates:
        - type: generic
          clazz: java.util.Collection
          requires:
              - type: class
                name: java.util.stream.Stream
          template: $expr$.stream().collect(java.util.stream.Collectors.groupingBy(it -> $func$))$END$
        - type: generic
          clazz: java.util.stream.Stream
          template: $expr$.collect(java.util.stream.Collectors.groupingBy(it -> $func$))$END$
        - type: array # 数组
          clazz: ARRAY
          requires:
              - type: class
                name: java.util.stream.Stream
          template: $expr$.stream().collect(java.util.stream.Collectors.groupingBy(it -> $func$)$END$

  - name: partitioningBy
    description: paritioning by function
    templates:
        - type: generic
          clazz: java.util.Collection
          requires:
              - type: class
                name: java.util.stream.Stream
          template: $expr$.stream().collect(java.util.stream.Collectors.partitioningBy(it -> $func$))$END$
        - type: generic
          clazz: java.util.stream.Stream
          template: $expr$.collect(java.util.stream.Collectors.partitioningBy(it -> $func$))$END$
        - type: array # 数组
          clazz: ARRAY
          requires:
              - type: class
                name: java.util.stream.Stream
          template: $expr$.stream().collect(java.util.stream.Collectors.partitioningBy(it -> $func$)$END$
